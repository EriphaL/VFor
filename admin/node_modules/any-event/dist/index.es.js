import { __values } from 'tslib';

var default_1 = (function () {
    function default_1() {
        this.listenersMap = {};
    }
    default_1.prototype.target = function (el) {
        var _this = this;
        return {
            on: function (eventName, listener) {
                _this.on(eventName, listener, { target: el });
            }
        };
    };
    default_1.prototype.on = function (eventName, listener, _a) {
        var target = (_a === void 0 ? {} : _a).target;
        if (void 0 === this.listenersMap[eventName]) {
            this.listenersMap[eventName] = [];
        }
        if (void 0 !== target) {
            listener.target = target;
        }
        this.listenersMap[eventName].push(listener);
    };
    default_1.prototype.off = function (eventName, listener) {
        var listeners = this.listenersMap[eventName];
        if (void 0 !== listeners) {
            if (void 0 === listener) {
                delete this.listenersMap[eventName];
            }
            else {
                var index = listeners.findIndex(function (fn) { return fn === listener; });
                listeners.splice(index, 1);
            }
        }
    };
    default_1.prototype.emit = function (eventName, payload, beforeHook) {
        var e_1, _a;
        if (beforeHook === void 0) { beforeHook = function () { return true; }; }
        var listeners = this.listenersMap[eventName];
        if (void 0 !== listeners && 0 < listeners.length) {
            try {
                for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {
                    var listener = listeners_1_1.value;
                    var target = listener.target;
                    if (beforeHook({ target: target })) {
                        listener(payload);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    default_1.prototype.destroy = function () {
        this.listenersMap = {};
    };
    return default_1;
}());

export default default_1;
