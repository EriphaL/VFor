declare type SupportTarget = HTMLElement | SVGElement;
interface Listener {
    (...payload: any): void;
    target?: SupportTarget;
}
interface ListenersMap {
    [propName: string]: Listener[];
}
interface EmitBeforeHook {
    (options?: {
        target?: SupportTarget;
    }): boolean;
}
export default class {
    listenersMap: ListenersMap;
    target(el: HTMLElement): {
        on: (eventName: string, listener: Listener) => void;
    };
    /**
     * 绑定事件
     * @param {String|Symbol} 事件名
     * @param {Function} 回调函数
     */
    on(eventName: string, listener: Listener, { target }?: {
        target?: SupportTarget;
    }): void;
    /**
     * 解除绑定
     * 如果不指定listener, 那么解除所有eventName对应回调
     * @param {String|Symbol} 事件名
     * @param {Function} 回调函数
     */
    off(eventName: string, listener?: Listener): void;
    /**
     * 按照监听器注册的顺序，同步地调用每个注册到名为 eventName 的事件的监听器，并传入提供的参数。
     * @param {String|Symbol} 事件名
     * @param {Any} 载荷数据
     * @returns {Boolean} 如果事件有监听器，则返回 true，否则返回 false。
     */
    emit(eventName: string, payload?: any, beforeHook?: EmitBeforeHook): void;
    /**
     * 事件拦截器
     * @param hook 钩子函数
     */
    /**
     * 销毁实例
     */
    destroy(): void;
}
export {};
