{"remainingRequest":"/Users/eripha/Desktop/project/routine/admin/node_modules/babel-loader/lib/index.js!/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eripha/Desktop/project/routine/admin/src/views/D3AnyTouch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eripha/Desktop/project/routine/admin/src/views/D3AnyTouch.vue","mtime":1593409778799},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D3AnyTouch.vue"],"names":[],"mappings":"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","sourcesContent":["\n<template>\n<article>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1000\" height=\"1000\" style=\"width:100%\">\n    <g transform=\"translate(100, 100)\">\n      <template v-for=\"(linkPath, index) in linkPaths\">\n        <path v-if=\"linkPath\" :key=\"index\" :d=\"linkPath\" class=\"line\" />\n      </template>\n    </g>\n    <g transform=\"translate(100, 100)\">\n        <!-- <foreignObject>SVG元素允许包含不同的XML命名空间。在浏览器的上下文中，很可能是XHTML / HTML。为了去包含xhtml -->\n      <foreignObject\n        v-for=\"(node,index) in nodes\"\n        v-show=\"!node.hidden\"\n        :class=\"{[`at-${action}`]:activeNode===node}\"\n        :key=\"'foreignObject'+index\"\n        :width=\"itemWidth\"\n        :height=\"itemHeight\"\n        :x=\"node.y - itemWidth/2\"\n        :y=\"node.x - itemHeight/2\"\n        @panstart=\"onPanstart(index,$event)\"\n        @panmove=\"onPanmove(index,$event)\"\n        @panend=\"onPanend\"\n        @pancancel=\"onPanend\"\n        @tap=\"onTap(index)\"\n      >\n        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n          <div class=\"text\">\n            <p>{{node.hidden}} 节点层级: {{node.depth}}</p>\n            <p>节点顺序: {{index}}</p>\n          </div>\n        </body>\n      </foreignObject>\n    </g>\n  </svg>\n</article>\n</template>\n\n<script>\n/*eslint-disable */\n// import * as d3 from 'd3';\n// import Core from '../../../packages/core/dist/index.es.js';\n// import Pan from '../../../packages/pan/dist/index.es.js';\n// Core.use(Pan, { threshold: 0 });\nimport { hierarchy, tree } from \"d3-hierarchy\";\nimport { linkHorizontal } from \"d3-shape\";\nimport AnyTouch from \"any-touch\";\nimport { dataset, animate } from \"./topology\";\n// const pointsGroup = [];\n// const paths = [];\nexport default {\n  name: \"Topology\",\n  props: {\n    itemWidth: {\n      type: Number,\n      default: 160\n    },\n    itemHeight: {\n      type: Number,\n      default: 100\n    }\n  },\n  data() {\n    return {\n      nodes: [],\n      linkPaths: [],\n      tree: {},\n      activeNode: null,\n      action: \"\"\n    };\n  },\n  mounted() {\n    this.renderTree();\n    const at = new AnyTouch(this.$el);\n    this.$on(\"hook:destroy\", at.destroy);\n  },\n  methods: {\n    /**\n     * 把普通树形变成d3需要的树形\n     */\n    genTreeData(data) {\n      const width = 1000;\n      const height = 1000;\n      // hierarchy把普通的树形数据变成d3的tree结构,\n      // 这样tree就有了d3的方法, 可以通过方法获取子节点(tree.descendants)/父节点/节点数等信息\n      const root = hierarchy(data);\n      // 遍历子节点,descendants是后代的意思,\n      // 但是其实也会包含当前节点本身.\n      // 给节点增加hidden字段用来控制当前节点显示/隐藏.\n      root.descendants().forEach(node => {\n        node.hidden = false;\n      });\n      // d3.tree运行后会返回一个函数,\n      // 通过函数可以设置图形的一些尺寸(nodeSize)/位置间距(separation)信息\n      // 这样在返回的函数中传入刚才输入的d3.tree结构数据, 比如上面的root,\n      // 那么拓扑所需的数据就都全了.\n      return (\n        tree()\n          .separation(function(a, b) {\n            // 同级元素调整间隙比例\n            // 一般就用2:1就好\n            return (a.parent == b.parent ? 2 : 1) / a.depth;\n          })\n          // 节点尺寸\n          .nodeSize([110, width / (root.height + 1)])(root)\n      );\n    },\n    /**\n     * 生成节点数组 => [Node, Node]\n     * 用来给模板渲染元素\n     */\n    updateNodes() {\n      this.nodes = this.tree.descendants();\n    },\n    /**\n     * 生成线\n     */\n    updateLinks() {\n      // tree.links会根据节点数据生成连线数据\n      this.linkPaths = this.tree.links().map(link => {\n        // d.linkHorizontal和上面的d3.tree一样,\n        // 可以当做构造函数,\n        // 其返回一个函数\n        // 可以用函数上的x/y方法指定\n        // 由于默认生成tree数据是上下结构的拓扑数据,\n        // 所以为了生成左至右的线需要把X/Y数据颠倒\n        // 最终生成线数据结构类似这样:{source:{},target:{}}\n        if (!link.target.hidden) {\n          return linkHorizontal()\n            .x(d => d.y)\n            .y(d => d.x)(link);\n        }\n      });\n    },\n    /**\n     * 生成所需数据\n     */\n    renderTree() {\n      this.tree = this.genTreeData(dataset);\n      this.updateLinks();\n      this.updateNodes();\n    },\n    /**\n     * 拖拽开始, 记录当前节点\n     */\n    onPanstart(index, e) {\n      const [item] = this.nodes.splice(index, 1);\n      this.nodes.push(item);\n      this.activeNode = item;\n    },\n    /**\n     * 拖拽中\n     * 变化节点坐标\n     * 重新生成连线数据\n     */\n    onPanmove(index, e) {\n      this.action = e.type;\n      const { deltaX, deltaY } = e;\n      const { length } = this.nodes;\n      this.activeNode.x += deltaY;\n      this.activeNode.y += deltaX;\n      this.updateLinks();\n    },\n    /**\n     * 取消当前节点激活\n     */\n    onPanend() {\n      this.activeNode = null;\n    },\n    /**\n     *\n     */\n    onTap(index) {\n      this.activeNode = this.nodes[index];\n      // 当前节点记录是否收起/展开\n      if (void 0 === this.activeNode.collapse) {\n        this.$set(this.activeNode, \"collapse\", true);\n      } else {\n        this.activeNode.collapse = !this.activeNode.collapse;\n      }\n      const { x, y, collapse } = this.activeNode;\n      // descendants返回的子节点包含自己, 所以排除自己\n      const [a, ...childNodes] = this.activeNode.descendants();\n      // 根据节点折叠状态来展开/折叠子节点显示\n      childNodes.forEach(node => {\n        if (collapse) {\n          const x1 = node.x;\n          const y1 = node.y;\n          // 存储展开时候的位置,\n          // 下次复原位置用\n          node._x = x1;\n          node._y = y1;\n          animate(1, 0, 200, (value, isDone) => {\n            node.x = x - (x - x1) * value;\n            node.y = y - (y - y1) * value;\n            if (isDone) {\n              node.hidden = true;\n            }\n            this.updateLinks();\n          });\n        } else {\n          node.hidden = false;\n          // 此处让value从0 - 1在200ms内不停变化\n          // 从而让节点位置变化实现展开收缩动画\n          animate(0, 1, 200, value => {\n            node.x = x + (node._x - x) * value;\n            node.y = y + (node._y - y) * value;\n            this.updateLinks();\n          });\n        }\n      });\n      // this.updateNodes();\n      // this.updateLinks();\n    }\n  }\n};\n/*eslint-enable */\n</script>\n\n<style scoped>\nheader {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  padding: 16px;\n  /* a {\n        color: rgb(3, 159, 107);\n    } */\n}\n.line {\n  fill: none;\n  stroke: rgb(3, 159, 107);\n  stroke-width: 1;\n}\n.circle {\n  fill: rgb(3, 159, 107);\n}\n.text {\n  background-color: rgb(3, 159, 107);\n  margin: 8px;\n  width: 90%;\n  padding: 8px;\n  text-align: center;\n  color: #fff;\n  box-shadow: 1px 2px 8px rgba(4, 108, 73, 0.5);\n  border-radius: 4px;\n  cursor: pointer;\n}\nforeignObject.at-panmove .text {\n  cursor: move;\n  background-color: rgb(3, 159, 107, 0.7);\n}\n</style>\n\n"],"sourceRoot":"src/views"}]}