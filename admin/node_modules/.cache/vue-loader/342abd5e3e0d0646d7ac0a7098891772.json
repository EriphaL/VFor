{"remainingRequest":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eripha/Desktop/project/routine/admin/src/views/D3AnyTouch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eripha/Desktop/project/routine/admin/src/views/D3AnyTouch.vue","mtime":1593409778799},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8qZXNsaW50LWRpc2FibGUgKi8KLy8gaW1wb3J0ICogYXMgZDMgZnJvbSAnZDMnOwovLyBpbXBvcnQgQ29yZSBmcm9tICcuLi8uLi8uLi9wYWNrYWdlcy9jb3JlL2Rpc3QvaW5kZXguZXMuanMnOwovLyBpbXBvcnQgUGFuIGZyb20gJy4uLy4uLy4uL3BhY2thZ2VzL3Bhbi9kaXN0L2luZGV4LmVzLmpzJzsKLy8gQ29yZS51c2UoUGFuLCB7IHRocmVzaG9sZDogMCB9KTsKaW1wb3J0IHsgaGllcmFyY2h5LCB0cmVlIH0gZnJvbSAiZDMtaGllcmFyY2h5IjsKaW1wb3J0IHsgbGlua0hvcml6b250YWwgfSBmcm9tICJkMy1zaGFwZSI7CmltcG9ydCBBbnlUb3VjaCBmcm9tICJhbnktdG91Y2giOwppbXBvcnQgeyBkYXRhc2V0LCBhbmltYXRlIH0gZnJvbSAiLi90b3BvbG9neSI7Ci8vIGNvbnN0IHBvaW50c0dyb3VwID0gW107Ci8vIGNvbnN0IHBhdGhzID0gW107CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVG9wb2xvZ3kiLAogIHByb3BzOiB7CiAgICBpdGVtV2lkdGg6IHsKICAgICAgdHlwZTogTnVtYmVyLAogICAgICBkZWZhdWx0OiAxNjAKICAgIH0sCiAgICBpdGVtSGVpZ2h0OiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogMTAwCiAgICB9CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbm9kZXM6IFtdLAogICAgICBsaW5rUGF0aHM6IFtdLAogICAgICB0cmVlOiB7fSwKICAgICAgYWN0aXZlTm9kZTogbnVsbCwKICAgICAgYWN0aW9uOiAiIgogICAgfTsKICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLnJlbmRlclRyZWUoKTsKICAgIGNvbnN0IGF0ID0gbmV3IEFueVRvdWNoKHRoaXMuJGVsKTsKICAgIHRoaXMuJG9uKCJob29rOmRlc3Ryb3kiLCBhdC5kZXN0cm95KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICog5oqK5pmu6YCa5qCR5b2i5Y+Y5oiQZDPpnIDopoHnmoTmoJHlvaIKICAgICAqLwogICAgZ2VuVHJlZURhdGEoZGF0YSkgewogICAgICBjb25zdCB3aWR0aCA9IDEwMDA7CiAgICAgIGNvbnN0IGhlaWdodCA9IDEwMDA7CiAgICAgIC8vIGhpZXJhcmNoeeaKiuaZrumAmueahOagkeW9ouaVsOaNruWPmOaIkGQz55qEdHJlZee7k+aehCwKICAgICAgLy8g6L+Z5qC3dHJlZeWwseacieS6hmQz55qE5pa55rOVLCDlj6/ku6XpgJrov4fmlrnms5Xojrflj5blrZDoioLngrkodHJlZS5kZXNjZW5kYW50cykv54i26IqC54K5L+iKgueCueaVsOetieS/oeaBrwogICAgICBjb25zdCByb290ID0gaGllcmFyY2h5KGRhdGEpOwogICAgICAvLyDpgY3ljoblrZDoioLngrksZGVzY2VuZGFudHPmmK/lkI7ku6PnmoTmhI/mgJ0sCiAgICAgIC8vIOS9huaYr+WFtuWunuS5n+S8muWMheWQq+W9k+WJjeiKgueCueacrOi6qy4KICAgICAgLy8g57uZ6IqC54K55aKe5YqgaGlkZGVu5a2X5q6155So5p2l5o6n5Yi25b2T5YmN6IqC54K55pi+56S6L+makOiXjy4KICAgICAgcm9vdC5kZXNjZW5kYW50cygpLmZvckVhY2gobm9kZSA9PiB7CiAgICAgICAgbm9kZS5oaWRkZW4gPSBmYWxzZTsKICAgICAgfSk7CiAgICAgIC8vIGQzLnRyZWXov5DooYzlkI7kvJrov5Tlm57kuIDkuKrlh73mlbAsCiAgICAgIC8vIOmAmui/h+WHveaVsOWPr+S7peiuvue9ruWbvuW9oueahOS4gOS6m+WwuuWvuChub2RlU2l6ZSkv5L2N572u6Ze06LedKHNlcGFyYXRpb24p5L+h5oGvCiAgICAgIC8vIOi/meagt+WcqOi/lOWbnueahOWHveaVsOS4reS8oOWFpeWImuaJjei+k+WFpeeahGQzLnRyZWXnu5PmnoTmlbDmja4sIOavlOWmguS4iumdoueahHJvb3QsCiAgICAgIC8vIOmCo+S5iOaLk+aJkeaJgOmcgOeahOaVsOaNruWwsemDveWFqOS6hi4KICAgICAgcmV0dXJuICgKICAgICAgICB0cmVlKCkKICAgICAgICAgIC5zZXBhcmF0aW9uKGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgLy8g5ZCM57qn5YWD57Sg6LCD5pW06Ze06ZqZ5q+U5L6LCiAgICAgICAgICAgIC8vIOS4gOiIrOWwseeUqDI6MeWwseWlvQogICAgICAgICAgICByZXR1cm4gKGEucGFyZW50ID09IGIucGFyZW50ID8gMiA6IDEpIC8gYS5kZXB0aDsKICAgICAgICAgIH0pCiAgICAgICAgICAvLyDoioLngrnlsLrlr7gKICAgICAgICAgIC5ub2RlU2l6ZShbMTEwLCB3aWR0aCAvIChyb290LmhlaWdodCArIDEpXSkocm9vdCkKICAgICAgKTsKICAgIH0sCiAgICAvKioKICAgICAqIOeUn+aIkOiKgueCueaVsOe7hCA9PiBbTm9kZSwgTm9kZV0KICAgICAqIOeUqOadpee7meaooeadv+a4suafk+WFg+e0oAogICAgICovCiAgICB1cGRhdGVOb2RlcygpIHsKICAgICAgdGhpcy5ub2RlcyA9IHRoaXMudHJlZS5kZXNjZW5kYW50cygpOwogICAgfSwKICAgIC8qKgogICAgICog55Sf5oiQ57q/CiAgICAgKi8KICAgIHVwZGF0ZUxpbmtzKCkgewogICAgICAvLyB0cmVlLmxpbmtz5Lya5qC55o2u6IqC54K55pWw5o2u55Sf5oiQ6L+e57q/5pWw5o2uCiAgICAgIHRoaXMubGlua1BhdGhzID0gdGhpcy50cmVlLmxpbmtzKCkubWFwKGxpbmsgPT4gewogICAgICAgIC8vIGQubGlua0hvcml6b250YWzlkozkuIrpnaLnmoRkMy50cmVl5LiA5qC3LAogICAgICAgIC8vIOWPr+S7peW9k+WBmuaehOmAoOWHveaVsCwKICAgICAgICAvLyDlhbbov5Tlm57kuIDkuKrlh73mlbAKICAgICAgICAvLyDlj6/ku6XnlKjlh73mlbDkuIrnmoR4L3nmlrnms5XmjIflrpoKICAgICAgICAvLyDnlLHkuo7pu5jorqTnlJ/miJB0cmVl5pWw5o2u5piv5LiK5LiL57uT5p6E55qE5ouT5omR5pWw5o2uLAogICAgICAgIC8vIOaJgOS7peS4uuS6hueUn+aIkOW3puiHs+WPs+eahOe6v+mcgOimgeaKilgvWeaVsOaNrumioOWAkgogICAgICAgIC8vIOacgOe7iOeUn+aIkOe6v+aVsOaNrue7k+aehOexu+S8vOi/meagtzp7c291cmNlOnt9LHRhcmdldDp7fX0KICAgICAgICBpZiAoIWxpbmsudGFyZ2V0LmhpZGRlbikgewogICAgICAgICAgcmV0dXJuIGxpbmtIb3Jpem9udGFsKCkKICAgICAgICAgICAgLngoZCA9PiBkLnkpCiAgICAgICAgICAgIC55KGQgPT4gZC54KShsaW5rKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSwKICAgIC8qKgogICAgICog55Sf5oiQ5omA6ZyA5pWw5o2uCiAgICAgKi8KICAgIHJlbmRlclRyZWUoKSB7CiAgICAgIHRoaXMudHJlZSA9IHRoaXMuZ2VuVHJlZURhdGEoZGF0YXNldCk7CiAgICAgIHRoaXMudXBkYXRlTGlua3MoKTsKICAgICAgdGhpcy51cGRhdGVOb2RlcygpOwogICAgfSwKICAgIC8qKgogICAgICog5ouW5ou95byA5aeLLCDorrDlvZXlvZPliY3oioLngrkKICAgICAqLwogICAgb25QYW5zdGFydChpbmRleCwgZSkgewogICAgICBjb25zdCBbaXRlbV0gPSB0aGlzLm5vZGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgIHRoaXMubm9kZXMucHVzaChpdGVtKTsKICAgICAgdGhpcy5hY3RpdmVOb2RlID0gaXRlbTsKICAgIH0sCiAgICAvKioKICAgICAqIOaLluaLveS4rQogICAgICog5Y+Y5YyW6IqC54K55Z2Q5qCHCiAgICAgKiDph43mlrDnlJ/miJDov57nur/mlbDmja4KICAgICAqLwogICAgb25QYW5tb3ZlKGluZGV4LCBlKSB7CiAgICAgIHRoaXMuYWN0aW9uID0gZS50eXBlOwogICAgICBjb25zdCB7IGRlbHRhWCwgZGVsdGFZIH0gPSBlOwogICAgICBjb25zdCB7IGxlbmd0aCB9ID0gdGhpcy5ub2RlczsKICAgICAgdGhpcy5hY3RpdmVOb2RlLnggKz0gZGVsdGFZOwogICAgICB0aGlzLmFjdGl2ZU5vZGUueSArPSBkZWx0YVg7CiAgICAgIHRoaXMudXBkYXRlTGlua3MoKTsKICAgIH0sCiAgICAvKioKICAgICAqIOWPlua2iOW9k+WJjeiKgueCuea/gOa0uwogICAgICovCiAgICBvblBhbmVuZCgpIHsKICAgICAgdGhpcy5hY3RpdmVOb2RlID0gbnVsbDsKICAgIH0sCiAgICAvKioKICAgICAqCiAgICAgKi8KICAgIG9uVGFwKGluZGV4KSB7CiAgICAgIHRoaXMuYWN0aXZlTm9kZSA9IHRoaXMubm9kZXNbaW5kZXhdOwogICAgICAvLyDlvZPliY3oioLngrnorrDlvZXmmK/lkKbmlLbotbcv5bGV5byACiAgICAgIGlmICh2b2lkIDAgPT09IHRoaXMuYWN0aXZlTm9kZS5jb2xsYXBzZSkgewogICAgICAgIHRoaXMuJHNldCh0aGlzLmFjdGl2ZU5vZGUsICJjb2xsYXBzZSIsIHRydWUpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuYWN0aXZlTm9kZS5jb2xsYXBzZSA9ICF0aGlzLmFjdGl2ZU5vZGUuY29sbGFwc2U7CiAgICAgIH0KICAgICAgY29uc3QgeyB4LCB5LCBjb2xsYXBzZSB9ID0gdGhpcy5hY3RpdmVOb2RlOwogICAgICAvLyBkZXNjZW5kYW50c+i/lOWbnueahOWtkOiKgueCueWMheWQq+iHquW3sSwg5omA5Lul5o6S6Zmk6Ieq5bexCiAgICAgIGNvbnN0IFthLCAuLi5jaGlsZE5vZGVzXSA9IHRoaXMuYWN0aXZlTm9kZS5kZXNjZW5kYW50cygpOwogICAgICAvLyDmoLnmja7oioLngrnmipjlj6DnirbmgIHmnaXlsZXlvIAv5oqY5Y+g5a2Q6IqC54K55pi+56S6CiAgICAgIGNoaWxkTm9kZXMuZm9yRWFjaChub2RlID0+IHsKICAgICAgICBpZiAoY29sbGFwc2UpIHsKICAgICAgICAgIGNvbnN0IHgxID0gbm9kZS54OwogICAgICAgICAgY29uc3QgeTEgPSBub2RlLnk7CiAgICAgICAgICAvLyDlrZjlgqjlsZXlvIDml7blgJnnmoTkvY3nva4sCiAgICAgICAgICAvLyDkuIvmrKHlpI3ljp/kvY3nva7nlKgKICAgICAgICAgIG5vZGUuX3ggPSB4MTsKICAgICAgICAgIG5vZGUuX3kgPSB5MTsKICAgICAgICAgIGFuaW1hdGUoMSwgMCwgMjAwLCAodmFsdWUsIGlzRG9uZSkgPT4gewogICAgICAgICAgICBub2RlLnggPSB4IC0gKHggLSB4MSkgKiB2YWx1ZTsKICAgICAgICAgICAgbm9kZS55ID0geSAtICh5IC0geTEpICogdmFsdWU7CiAgICAgICAgICAgIGlmIChpc0RvbmUpIHsKICAgICAgICAgICAgICBub2RlLmhpZGRlbiA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy51cGRhdGVMaW5rcygpOwogICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIG5vZGUuaGlkZGVuID0gZmFsc2U7CiAgICAgICAgICAvLyDmraTlpITorql2YWx1ZeS7jjAgLSAx5ZyoMjAwbXPlhoXkuI3lgZzlj5jljJYKICAgICAgICAgIC8vIOS7juiAjOiuqeiKgueCueS9jee9ruWPmOWMluWunueOsOWxleW8gOaUtue8qeWKqOeUuwogICAgICAgICAgYW5pbWF0ZSgwLCAxLCAyMDAsIHZhbHVlID0+IHsKICAgICAgICAgICAgbm9kZS54ID0geCArIChub2RlLl94IC0geCkgKiB2YWx1ZTsKICAgICAgICAgICAgbm9kZS55ID0geSArIChub2RlLl95IC0geSkgKiB2YWx1ZTsKICAgICAgICAgICAgdGhpcy51cGRhdGVMaW5rcygpOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgLy8gdGhpcy51cGRhdGVOb2RlcygpOwogICAgICAvLyB0aGlzLnVwZGF0ZUxpbmtzKCk7CiAgICB9CiAgfQp9OwovKmVzbGludC1lbmFibGUgKi8K"},{"version":3,"sources":["D3AnyTouch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"D3AnyTouch.vue","sourceRoot":"src/views","sourcesContent":["\n<template>\n<article>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1000\" height=\"1000\" style=\"width:100%\">\n    <g transform=\"translate(100, 100)\">\n      <template v-for=\"(linkPath, index) in linkPaths\">\n        <path v-if=\"linkPath\" :key=\"index\" :d=\"linkPath\" class=\"line\" />\n      </template>\n    </g>\n    <g transform=\"translate(100, 100)\">\n        <!-- <foreignObject>SVG元素允许包含不同的XML命名空间。在浏览器的上下文中，很可能是XHTML / HTML。为了去包含xhtml -->\n      <foreignObject\n        v-for=\"(node,index) in nodes\"\n        v-show=\"!node.hidden\"\n        :class=\"{[`at-${action}`]:activeNode===node}\"\n        :key=\"'foreignObject'+index\"\n        :width=\"itemWidth\"\n        :height=\"itemHeight\"\n        :x=\"node.y - itemWidth/2\"\n        :y=\"node.x - itemHeight/2\"\n        @panstart=\"onPanstart(index,$event)\"\n        @panmove=\"onPanmove(index,$event)\"\n        @panend=\"onPanend\"\n        @pancancel=\"onPanend\"\n        @tap=\"onTap(index)\"\n      >\n        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n          <div class=\"text\">\n            <p>{{node.hidden}} 节点层级: {{node.depth}}</p>\n            <p>节点顺序: {{index}}</p>\n          </div>\n        </body>\n      </foreignObject>\n    </g>\n  </svg>\n</article>\n</template>\n\n<script>\n/*eslint-disable */\n// import * as d3 from 'd3';\n// import Core from '../../../packages/core/dist/index.es.js';\n// import Pan from '../../../packages/pan/dist/index.es.js';\n// Core.use(Pan, { threshold: 0 });\nimport { hierarchy, tree } from \"d3-hierarchy\";\nimport { linkHorizontal } from \"d3-shape\";\nimport AnyTouch from \"any-touch\";\nimport { dataset, animate } from \"./topology\";\n// const pointsGroup = [];\n// const paths = [];\nexport default {\n  name: \"Topology\",\n  props: {\n    itemWidth: {\n      type: Number,\n      default: 160\n    },\n    itemHeight: {\n      type: Number,\n      default: 100\n    }\n  },\n  data() {\n    return {\n      nodes: [],\n      linkPaths: [],\n      tree: {},\n      activeNode: null,\n      action: \"\"\n    };\n  },\n  mounted() {\n    this.renderTree();\n    const at = new AnyTouch(this.$el);\n    this.$on(\"hook:destroy\", at.destroy);\n  },\n  methods: {\n    /**\n     * 把普通树形变成d3需要的树形\n     */\n    genTreeData(data) {\n      const width = 1000;\n      const height = 1000;\n      // hierarchy把普通的树形数据变成d3的tree结构,\n      // 这样tree就有了d3的方法, 可以通过方法获取子节点(tree.descendants)/父节点/节点数等信息\n      const root = hierarchy(data);\n      // 遍历子节点,descendants是后代的意思,\n      // 但是其实也会包含当前节点本身.\n      // 给节点增加hidden字段用来控制当前节点显示/隐藏.\n      root.descendants().forEach(node => {\n        node.hidden = false;\n      });\n      // d3.tree运行后会返回一个函数,\n      // 通过函数可以设置图形的一些尺寸(nodeSize)/位置间距(separation)信息\n      // 这样在返回的函数中传入刚才输入的d3.tree结构数据, 比如上面的root,\n      // 那么拓扑所需的数据就都全了.\n      return (\n        tree()\n          .separation(function(a, b) {\n            // 同级元素调整间隙比例\n            // 一般就用2:1就好\n            return (a.parent == b.parent ? 2 : 1) / a.depth;\n          })\n          // 节点尺寸\n          .nodeSize([110, width / (root.height + 1)])(root)\n      );\n    },\n    /**\n     * 生成节点数组 => [Node, Node]\n     * 用来给模板渲染元素\n     */\n    updateNodes() {\n      this.nodes = this.tree.descendants();\n    },\n    /**\n     * 生成线\n     */\n    updateLinks() {\n      // tree.links会根据节点数据生成连线数据\n      this.linkPaths = this.tree.links().map(link => {\n        // d.linkHorizontal和上面的d3.tree一样,\n        // 可以当做构造函数,\n        // 其返回一个函数\n        // 可以用函数上的x/y方法指定\n        // 由于默认生成tree数据是上下结构的拓扑数据,\n        // 所以为了生成左至右的线需要把X/Y数据颠倒\n        // 最终生成线数据结构类似这样:{source:{},target:{}}\n        if (!link.target.hidden) {\n          return linkHorizontal()\n            .x(d => d.y)\n            .y(d => d.x)(link);\n        }\n      });\n    },\n    /**\n     * 生成所需数据\n     */\n    renderTree() {\n      this.tree = this.genTreeData(dataset);\n      this.updateLinks();\n      this.updateNodes();\n    },\n    /**\n     * 拖拽开始, 记录当前节点\n     */\n    onPanstart(index, e) {\n      const [item] = this.nodes.splice(index, 1);\n      this.nodes.push(item);\n      this.activeNode = item;\n    },\n    /**\n     * 拖拽中\n     * 变化节点坐标\n     * 重新生成连线数据\n     */\n    onPanmove(index, e) {\n      this.action = e.type;\n      const { deltaX, deltaY } = e;\n      const { length } = this.nodes;\n      this.activeNode.x += deltaY;\n      this.activeNode.y += deltaX;\n      this.updateLinks();\n    },\n    /**\n     * 取消当前节点激活\n     */\n    onPanend() {\n      this.activeNode = null;\n    },\n    /**\n     *\n     */\n    onTap(index) {\n      this.activeNode = this.nodes[index];\n      // 当前节点记录是否收起/展开\n      if (void 0 === this.activeNode.collapse) {\n        this.$set(this.activeNode, \"collapse\", true);\n      } else {\n        this.activeNode.collapse = !this.activeNode.collapse;\n      }\n      const { x, y, collapse } = this.activeNode;\n      // descendants返回的子节点包含自己, 所以排除自己\n      const [a, ...childNodes] = this.activeNode.descendants();\n      // 根据节点折叠状态来展开/折叠子节点显示\n      childNodes.forEach(node => {\n        if (collapse) {\n          const x1 = node.x;\n          const y1 = node.y;\n          // 存储展开时候的位置,\n          // 下次复原位置用\n          node._x = x1;\n          node._y = y1;\n          animate(1, 0, 200, (value, isDone) => {\n            node.x = x - (x - x1) * value;\n            node.y = y - (y - y1) * value;\n            if (isDone) {\n              node.hidden = true;\n            }\n            this.updateLinks();\n          });\n        } else {\n          node.hidden = false;\n          // 此处让value从0 - 1在200ms内不停变化\n          // 从而让节点位置变化实现展开收缩动画\n          animate(0, 1, 200, value => {\n            node.x = x + (node._x - x) * value;\n            node.y = y + (node._y - y) * value;\n            this.updateLinks();\n          });\n        }\n      });\n      // this.updateNodes();\n      // this.updateLinks();\n    }\n  }\n};\n/*eslint-enable */\n</script>\n\n<style scoped>\nheader {\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  padding: 16px;\n  /* a {\n        color: rgb(3, 159, 107);\n    } */\n}\n.line {\n  fill: none;\n  stroke: rgb(3, 159, 107);\n  stroke-width: 1;\n}\n.circle {\n  fill: rgb(3, 159, 107);\n}\n.text {\n  background-color: rgb(3, 159, 107);\n  margin: 8px;\n  width: 90%;\n  padding: 8px;\n  text-align: center;\n  color: #fff;\n  box-shadow: 1px 2px 8px rgba(4, 108, 73, 0.5);\n  border-radius: 4px;\n  cursor: pointer;\n}\nforeignObject.at-panmove .text {\n  cursor: move;\n  background-color: rgb(3, 159, 107, 0.7);\n}\n</style>\n\n"]}]}