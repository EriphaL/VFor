{"remainingRequest":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eripha/Desktop/project/routine/admin/src/views/CategoryEdit.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/eripha/Desktop/project/routine/admin/src/views/CategoryEdit.vue","mtime":1593353647762},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpoMXsKICBsaW5lLWhlaWdodDogbm9ybWFsOwp9Cg=="},{"version":3,"sources":["CategoryEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA;AACA;AACA","file":"CategoryEdit.vue","sourceRoot":"src/views","sourcesContent":["\n<template>\n  <!-- 分类创建及编辑页 -->\n  <div>\n    <!-- 如果url带id参数，就显示编辑分类，不带就显示新建分类 -->\n    <h1>{{id ? '编辑':'新建'}}分类</h1>\n    <!-- 点击保存按钮提交需要触发submit的原生事件，prevent表示阻止提交，不要跳转页面，定义一个save方法，写在methods中。在这边添加 -->\n    <el-form label-width=\"80px\" label-position=\"left\" @submit.native.prevent=\"save\">\n      <el-form-item label=\"上级分类\">\n        <el-select v-model=\"model.parent\">\n          <!-- lable决定选项显示什么内容，value决定点击它时真正存的是什么内容 -->\n          <el-option v-for=\"item in parents\" :key=\"item._id\"\n          :label=\"item.name\" :value=\"item._id\"></el-option>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"标题\">\n        <el-input v-model=\"model.name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"路径\">\n        <el-input v-model=\"model.path\"></el-input>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" native-type=\"submit\">保存</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    //在router的js文件中声明，这个页面可以跟路由尽可能的解耦\n    //接收id这个参数\n    id: {}\n  },\n  data () {\n    return {\n      model: {},\n      parents:[],\n    }\n  },\n  methods: {\n    //和后端的接口一样，用 async方式，把异步回调的方法换成同步，要用的话async和await成对使用\n    //新建和编辑的save方法要做条件判断\n    //新建：post接口  ；编辑：put接口\n    async save () {\n      let res\n      if(this.id){\n        res = await this.$http.put(`/rest/categories/${this.id}`,this.model)\n      }else{\n        res = await this.$http.post('/rest/categories',this.model)\n      }\n      //eslint检查不能声明未引用的变量，所以加上这一句\n      this.model = res.data\n\n// const res = await this.$http.post('categories',this.model)\n      // this.$http.post('categories', this.model)\n      this.$router.push('/categories/list')\n      this.$message({\n        type: 'success',\n        message: '保存成功'\n      })\n    },\n    //根据id获取到当前记录详情，把名称填充到input中去\n    async fetch(){\n      const res = await this.$http.get(`/rest/categories/${this.id}`)\n      this.model = res.data\n    },\n    //获取下拉列表中的上级分类\n    async fetchParents(){\n      const res = await this.$http.get(`/rest/categories`)\n      this.parents = res.data\n    }\n  },\n  created() {\n    this.fetchParents()\n    //前面这个条件满足之后（url带id参数，即当前处于编辑页面），再执行第二个条件\n    this.id && this.fetch()\n  },\n}\n</script>\n\n<style>\nh1{\n  line-height: normal;\n}\n</style>"]}]}