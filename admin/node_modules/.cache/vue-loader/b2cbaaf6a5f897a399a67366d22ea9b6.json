{"remainingRequest":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eripha/Desktop/project/routine/admin/src/views/ItemEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eripha/Desktop/project/routine/admin/src/views/ItemEdit.vue","mtime":1593006952781},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eripha/Desktop/project/routine/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgLy/lnKhyb3V0ZXLnmoRqc+aWh+S7tuS4reWjsOaYju+8jOi/meS4qumhtemdouWPr+S7pei3n+i3r+eUseWwveWPr+iDveeahOino+iApgogICAgLy/mjqXmlLZpZOi/meS4quWPguaVsAogICAgaWQ6IHt9CiAgfSwKICBkYXRhICgpIHsKICAgIHJldHVybiB7CiAgICAgIG1vZGVsOiB7fSwKICAgICAgcGFyZW50czogW10sCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBhZnRlclVwbG9hZChyZXMpewogICAgICAvL+aYvuekuui1i+WAvO+8jOS4ieS4quWPguaVsO+8jOe7mXRoaXMubW9kZWzvvIzotYvkuIDkuKrlsZ7mgKcnaWNvbics5YC85Li6cmVzLnVybAogICAgICB0aGlzLiRzZXQodGhpcy5tb2RlbCwnaWNvbicscmVzLnVybCkKICAgICAgLy8gdGhpcy5tb2RlbC5pY29uID0gcmVzLnVybAogICAgfSwKICAgIC8v5ZKM5ZCO56uv55qE5o6l5Y+j5LiA5qC377yM55SoIGFzeW5j5pa55byP77yM5oqK5byC5q2l5Zue6LCD55qE5pa55rOV5o2i5oiQ5ZCM5q2l77yM6KaB55So55qE6K+dYXN5bmPlkoxhd2FpdOaIkOWvueS9v+eUqAogICAgLy/mlrDlu7rlkoznvJbovpHnmoRzYXZl5pa55rOV6KaB5YGa5p2h5Lu25Yik5patCiAgICAvL+aWsOW7uu+8mnBvc3TmjqXlj6MgIO+8m+e8lui+ke+8mnB1dOaOpeWPowogICAgYXN5bmMgc2F2ZSAoKSB7CiAgICAgIGxldCByZXMKICAgICAgaWYgKHRoaXMuaWQpIHsKICAgICAgICByZXMgPSBhd2FpdCB0aGlzLiRodHRwLnB1dChgL3Jlc3QvaXRlbXMvJHt0aGlzLmlkfWAsIHRoaXMubW9kZWwpCiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzID0gYXdhaXQgdGhpcy4kaHR0cC5wb3N0KCcvcmVzdC9pdGVtcycsIHRoaXMubW9kZWwpCiAgICAgIH0KICAgICAgLy9lc2xpbnTmo4Dmn6XkuI3og73lo7DmmI7mnKrlvJXnlKjnmoTlj5jph4/vvIzmiYDku6XliqDkuIrov5nkuIDlj6UKICAgICAgdGhpcy5tb2RlbCA9IHJlcy5kYXRhCgogICAgICAvLyBjb25zdCByZXMgPSBhd2FpdCB0aGlzLiRodHRwLnBvc3QoJ2NhdGVnb3JpZXMnLHRoaXMubW9kZWwpCiAgICAgIC8vIHRoaXMuJGh0dHAucG9zdCgnY2F0ZWdvcmllcycsIHRoaXMubW9kZWwpCiAgICAgIHRoaXMuJHJvdXRlci5wdXNoKCcvaXRlbXMvbGlzdCcpCiAgICAgIHRoaXMuJG1lc3NhZ2UoewogICAgICAgIHR5cGU6ICdzdWNjZXNzJywKICAgICAgICBtZXNzYWdlOiAn5L+d5a2Y5oiQ5YqfJwogICAgICB9KQogICAgfSwKICAgIC8v5qC55o2uaWTojrflj5bliLDlvZPliY3orrDlvZXor6bmg4XvvIzmiorlkI3np7DloavlhYXliLBpbnB1dOS4reWOuwogICAgYXN5bmMgZmV0Y2ggKCkgewogICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLiRodHRwLmdldChgL3Jlc3QvaXRlbXMvJHt0aGlzLmlkfWApCiAgICAgIHRoaXMubW9kZWwgPSByZXMuZGF0YQogICAgfSwKICAgIC8v6I635Y+W5LiL5ouJ5YiX6KGo5Lit55qE5LiK57qn5YiG57G7CiAgICBhc3luYyBmZXRjaFBhcmVudHMgKCkgewogICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLiRodHRwLmdldChgL3Jlc3QvaXRlbXNgKQogICAgICB0aGlzLnBhcmVudHMgPSByZXMuZGF0YQogICAgfQogIH0sCiAgY3JlYXRlZCAoKSB7CiAgICB0aGlzLmZldGNoUGFyZW50cygpCiAgICAvL+WJjemdoui/meS4quadoeS7tua7oei2s+S5i+WQju+8iHVybOW4pmlk5Y+C5pWw77yM5Y2z5b2T5YmN5aSE5LqO57yW6L6R6aG16Z2i77yJ77yM5YaN5omn6KGM56ys5LqM5Liq5p2h5Lu2CiAgICB0aGlzLmlkICYmIHRoaXMuZmV0Y2goKQogIH0sCn0K"},{"version":3,"sources":["ItemEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ItemEdit.vue","sourceRoot":"src/views","sourcesContent":["\n<template>\n  <!-- 分类创建及编辑页 -->\n  <div>\n    <!-- 如果url带id参数，就显示编辑分类，不带就显示新建分类 -->\n    <h1>{{id ? '编辑':'新建'}}分类</h1>\n    <!-- 点击保存按钮提交需要触发submit的原生事件，prevent表示阻止提交，不要跳转页面，定义一个save方法，写在methods中。在这边添加 -->\n    <el-form @submit.native.prevent=\"save\">\n      <!-- <el-form-item label=\"上级分类\">\n        <el-select v-model=\"model.parent\">\n          \n          <el-option v-for=\"item in parents\" :key=\"item._id\"\n          :label=\"item.name\" :value=\"item._id\"></el-option>\n        </el-select>\n      </el-form-item>-->\n      <el-form-item label=\"名称\">\n        <el-input v-model=\"model.name\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"图标\">\n        <!-- :表示动态绑定\n          action表示上传的接口地址是什么 ，加上upload拼成上传地址,defaults表示默认参数\n          成功之后，在on-success中需要把返回来的图片的地址的值赋值给model.icon -->\n        <el-upload\n          class=\"avatar-uploader\"\n          :headers=\"getAuthHeaders()\"\n          :action=\"$http.defaults.baseURL + '/upload'\"\n          :show-file-list=\"false\"\n          :on-success=\"afterUpload\"\n        >\n        <!-- 如果有图片地址显示图片 -->\n          <img v-if=\"model.icon\" :src=\"model.icon\" class=\"avatar\" />\n          <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n        </el-upload>\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" native-type=\"submit\">保存</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n    //在router的js文件中声明，这个页面可以跟路由尽可能的解耦\n    //接收id这个参数\n    id: {}\n  },\n  data () {\n    return {\n      model: {},\n      parents: [],\n    }\n  },\n  methods: {\n    afterUpload(res){\n      //显示赋值，三个参数，给this.model，赋一个属性'icon',值为res.url\n      this.$set(this.model,'icon',res.url)\n      // this.model.icon = res.url\n    },\n    //和后端的接口一样，用 async方式，把异步回调的方法换成同步，要用的话async和await成对使用\n    //新建和编辑的save方法要做条件判断\n    //新建：post接口  ；编辑：put接口\n    async save () {\n      let res\n      if (this.id) {\n        res = await this.$http.put(`/rest/items/${this.id}`, this.model)\n      } else {\n        res = await this.$http.post('/rest/items', this.model)\n      }\n      //eslint检查不能声明未引用的变量，所以加上这一句\n      this.model = res.data\n\n      // const res = await this.$http.post('categories',this.model)\n      // this.$http.post('categories', this.model)\n      this.$router.push('/items/list')\n      this.$message({\n        type: 'success',\n        message: '保存成功'\n      })\n    },\n    //根据id获取到当前记录详情，把名称填充到input中去\n    async fetch () {\n      const res = await this.$http.get(`/rest/items/${this.id}`)\n      this.model = res.data\n    },\n    //获取下拉列表中的上级分类\n    async fetchParents () {\n      const res = await this.$http.get(`/rest/items`)\n      this.parents = res.data\n    }\n  },\n  created () {\n    this.fetchParents()\n    //前面这个条件满足之后（url带id参数，即当前处于编辑页面），再执行第二个条件\n    this.id && this.fetch()\n  },\n}\n</script>\n\n<style>\n\n</style>"]}]}