/**
 * 主程序, 不包含手势,
 * 主要用来适配Mouse/Touch事件
 * ==================== 参考 ====================
 * https://segmentfault.com/a/1190000010511484#articleHeader0
 * https://segmentfault.com/a/1190000007448808#articleHeader1
 * hammer.js http://hammerjs.github.io/
 */
import AnyEvent from 'any-event';
import { SupportEvent, Recognizer } from '@any-touch/shared';
import InputFactory from './Input';
declare type BeforeEachHook = (recognizer: Recognizer, next: () => void) => void;
export interface Options {
    domEvents?: false | EventInit;
    isPreventDefault?: boolean;
    preventDefaultExclude?: RegExp | ((ev: SupportEvent) => boolean);
}
export default class AnyTouch extends AnyEvent {
    static version: string;
    static recognizers: Recognizer[];
    static recognizerMap: Record<string, Recognizer>;
    /**
     * 安装插件
     * @param {AnyTouchPlugin} 插件
     * @param {any[]} 插件参数
     */
    static use: (Recognizer: new (...args: any) => any, options?: Record<string, any>) => void;
    /**
     * 卸载插件
     */
    static removeUse: (recognizerName?: string) => void;
    el?: HTMLElement;
    options: Options;
    input: InputFactory;
    recognizerMap: Record<string, Recognizer>;
    recognizers: Recognizer[];
    beforeEachHook?: BeforeEachHook;
    cacheComputedFunctionGroup: any;
    /**
     * @param {Element} 目标元素, 微信下没有el
     * @param {Object} 选项
     */
    constructor(el?: HTMLElement, options?: Options);
    /**
     * 使用插件
     * @param {AnyTouchPlugin} 插件
     * @param {Object} 选项
     */
    use(Recognizer: new (...args: any) => Recognizer, options?: Record<string, any>): void;
    /**
     * 移除插件
     * @param {String} 识别器name
     */
    removeUse(name?: string): void;
    /**
     * 监听input变化s
     * @param {Event}
     */
    catchEvent(event: SupportEvent): void;
    /**
     * 事件拦截器
     * @param hook 钩子函数
     */
    beforeEach(hook: (recognizer: Recognizer, next: () => void) => void): void;
    /**
     * 获取识别器通过名字
     * @param name 识别器的名字
     * @return 返回识别器
     */
    get(name: string): Recognizer | void;
    /**
     * 设置
     * @param options 选项
     */
    set(options: Options): void;
    /**
     * 销毁
     */
    destroy(): void;
}
export {};
