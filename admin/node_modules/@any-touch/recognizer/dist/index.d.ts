import { Input } from '@any-touch/shared';
import { SupportStatus } from '@any-touch/shared';
export { default as recognizeForPressMoveLike } from './recognizeForPressMoveLike';
export { default as resetStatusForPressMoveLike } from './resetStatusForPressMoveLike';
declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;
interface ComputeFunction {
    (input: Input): Record<string, any> | void;
}
interface GenComputeFunction {
    (): ComputeFunction;
    _id: string;
}
export default abstract class {
    name: string;
    disabled: boolean;
    status: SupportStatus;
    isRecognized: boolean;
    options: {
        [propName: string]: any;
    };
    recognizerMap: Record<string, this>;
    computedGroup: Record<string, any>;
    computed: Record<string, any>;
    computeFunctionMap: Record<string, any>;
    input?: Input;
    constructor(options: {
        name: string;
        [k: string]: any;
    });
    /**
     * 设置识别器
     * @param {Object} 选项
     */
    set(options?: Record<string, any>): this;
    /**
     * 验证触点
     * @param {Number} 触点数
     */
    isValidPointLength(pointLength: number): boolean;
    /**
     * 缓存计算函数的结果
     * @param Cs 计算函数
     * @param input 计算函数的参数
     */
    protected compute<T extends GenComputeFunction>(Cs: T[], input: Input): UnionToIntersection<Exclude<ReturnType<ReturnType<T>>, void>>;
    /**
     * 适用于大部分移动类型的手势,
     * 如pan/rotate/pinch/swipe
     * @param {Input} 输入记录
     */
    abstract recognize(Input: Input, callback: (type: string, ...payload: any[]) => void): void;
    /**
     * 校验输入数据
     * @param {Input} 计算数据
     * @returns {Boolean} 校验结果
     */
    abstract test(input: Input): boolean;
}
