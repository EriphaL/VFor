import { __assign, __values } from 'tslib';
import { STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED, STATUS_POSSIBLE, STATUS_START, STATUS_MOVE, INPUT_MOVE, INPUT_END, INPUT_CANCEL, INPUT_START } from '@any-touch/shared';

function resetStatus (recognizer) {
    if (-1 !== [STATUS_END, STATUS_CANCELLED, STATUS_RECOGNIZED, STATUS_FAILED].indexOf(recognizer.status)) {
        recognizer.status = STATUS_POSSIBLE;
    }
}

function flow(isVaild, activeStatus, inputType) {
    var _a, _b, _c, _d, _e, _f, _g;
    var STATE_MAP = {
        1: (_a = {},
            _a[STATUS_POSSIBLE] = (_b = {},
                _b[INPUT_MOVE] = STATUS_START,
                _b),
            _a[STATUS_START] = (_c = {},
                _c[INPUT_MOVE] = STATUS_MOVE,
                _c[INPUT_END] = STATUS_END,
                _c[INPUT_CANCEL] = STATUS_CANCELLED,
                _c),
            _a[STATUS_MOVE] = (_d = {},
                _d[INPUT_MOVE] = STATUS_MOVE,
                _d[INPUT_END] = STATUS_END,
                _d[INPUT_CANCEL] = STATUS_CANCELLED,
                _d),
            _a),
        0: (_e = {},
            _e[STATUS_START] = (_f = {},
                _f[INPUT_MOVE] = STATUS_CANCELLED,
                _f[INPUT_END] = STATUS_END,
                _f[INPUT_CANCEL] = STATUS_CANCELLED,
                _f),
            _e[STATUS_MOVE] = (_g = {},
                _g[INPUT_START] = STATUS_FAILED,
                _g[INPUT_MOVE] = STATUS_CANCELLED,
                _g[INPUT_END] = STATUS_END,
                _g[INPUT_CANCEL] = STATUS_CANCELLED,
                _g),
            _e)
    };
    if (void 0 !== STATE_MAP[Number(isVaild)][activeStatus]) {
        return STATE_MAP[Number(isVaild)][activeStatus][inputType] || activeStatus;
    }
    else {
        return activeStatus;
    }
}
function recognizeForPressMoveLike (recognizer, input, emit) {
    var isVaild = recognizer.test(input);
    resetStatus(recognizer);
    var inputType = input.inputType;
    recognizer.status = flow(isVaild, recognizer.status, inputType);
    var computed = recognizer.computed;
    recognizer.isRecognized = [STATUS_START, STATUS_MOVE].includes(recognizer.status);
    var name = recognizer.name, status = recognizer.status, isRecognized = recognizer.isRecognized;
    if (isRecognized) {
        emit(name, computed);
    }
    if (isRecognized || [STATUS_END, STATUS_CANCELLED].includes(recognizer.status)) {
        emit(name + status, computed);
    }
    return isVaild;
}

var default_1 = (function () {
    function default_1(options) {
        this.disabled = false;
        this.status = STATUS_POSSIBLE;
        this.isRecognized = false;
        this.recognizerMap = {};
        this.computedGroup = {};
        this.computed = {};
        this.computeFunctionMap = {};
        this.options = options;
        this.name = this.options.name;
    }
    default_1.prototype.set = function (options) {
        if (void 0 !== options) {
            this.options = __assign(__assign({}, this.options), options);
        }
        return this;
    };
    default_1.prototype.isValidPointLength = function (pointLength) {
        return 0 === this.options.pointLength || this.options.pointLength === pointLength;
    };
    default_1.prototype.compute = function (Cs, input) {
        var e_1, _a;
        var computed = Object.create(null);
        try {
            for (var Cs_1 = __values(Cs), Cs_1_1 = Cs_1.next(); !Cs_1_1.done; Cs_1_1 = Cs_1.next()) {
                var C = Cs_1_1.value;
                var _id = C._id;
                var _b = this, computedGroup = _b.computedGroup, computeFunctionMap = _b.computeFunctionMap;
                if (void 0 === computeFunctionMap[_id]) {
                    computeFunctionMap[_id] = C();
                }
                computedGroup[_id] = computedGroup[_id] || computeFunctionMap[_id](input);
                for (var key in computedGroup[_id]) {
                    computed[key] = computedGroup[_id][key];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (Cs_1_1 && !Cs_1_1.done && (_a = Cs_1.return)) _a.call(Cs_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return computed;
    };
    return default_1;
}());

export default default_1;
export { recognizeForPressMoveLike, resetStatus as resetStatusForPressMoveLike };
