import { __extends, __assign } from 'tslib';
import { ComputeVAndDir, ComputeDistance, ComputeDeltaXY } from '@any-touch/compute';
import Recognizer, { recognizeForPressMoveLike } from '@any-touch/recognizer';

var DEFAULT_OPTIONS = {
    name: 'pan',
    threshold: 10,
    pointLength: 1
};
var default_1 = (function (_super) {
    __extends(default_1, _super);
    function default_1(options) {
        return _super.call(this, __assign(__assign({}, DEFAULT_OPTIONS), options)) || this;
    }
    default_1.prototype.test = function (input) {
        var pointLength = input.pointLength;
        var distance = this.computed.distance;
        return ((this.isRecognized || this.options.threshold <= distance) &&
            this.isValidPointLength(pointLength));
    };
    default_1.prototype.recognize = function (input, emit) {
        this.computed = this.compute([ComputeVAndDir, ComputeDistance, ComputeDeltaXY], input);
        var isRecognized = void 0 !== this.computed.direction && recognizeForPressMoveLike(this, input, emit);
        if (isRecognized) {
            emit(this.options.name + this.computed.direction, this.computed);
        }
    };
    return default_1;
}(Recognizer));

export default default_1;
