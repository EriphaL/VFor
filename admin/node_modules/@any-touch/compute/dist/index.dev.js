'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vector = require('@any-touch/vector');
var shared = require('@any-touch/shared');

function computeAngle (_a) {
    var startV = _a.startV, prevV = _a.prevV, activeV = _a.activeV;
    var deltaAngle = Math.round(vector.getAngle(activeV, prevV));
    var angle = Math.round(vector.getAngle(activeV, startV));
    return { angle: angle, deltaAngle: deltaAngle };
}

function ComputeDeltaXY() {
    return function (input) {
        var prevInput = input.prevInput;
        var deltaX = 0;
        var deltaY = 0;
        var deltaXYAngle = 0;
        if (void 0 !== prevInput) {
            deltaX = input.x - prevInput.x;
            deltaY = input.y - prevInput.y;
            if (0 !== deltaX || 0 !== deltaY) {
                var deltaXY = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
                deltaXYAngle = Math.round(vector.radianToAngle(Math.acos(Math.abs(deltaX) / deltaXY)));
            }
        }
        return { deltaX: deltaX, deltaY: deltaY, deltaXYAngle: deltaXYAngle };
    };
}
ComputeDeltaXY._id = "ComputeDeltaXY";

function computeDistance() {
    var displacementX = 0;
    var displacementY = 0;
    var distanceX = 0;
    var distanceY = 0;
    var distance = 0;
    var overallDirection = shared.NONE;
    return function (input) {
        var inputType = input.inputType, startInput = input.startInput;
        if (shared.INPUT_START === inputType) {
            displacementX = 0;
            displacementY = 0;
            distanceX = 0;
            distanceY = 0;
            distance = 0;
            overallDirection = shared.NONE;
        }
        else if (shared.INPUT_MOVE === inputType) {
            displacementX = Math.round(input.points[0][shared.CLIENT_X] - startInput.points[0][shared.CLIENT_X]);
            displacementY = Math.round(input.points[0][shared.CLIENT_Y] - startInput.points[0][shared.CLIENT_Y]);
            distanceX = Math.abs(displacementX);
            distanceY = Math.abs(displacementY);
            distance = Math.round(vector.getVLength({ x: distanceX, y: distanceY }));
            overallDirection = vector.getDirection(displacementX, displacementY);
        }
        return {
            displacementX: displacementX, displacementY: displacementY, distanceX: distanceX, distanceY: distanceY, distance: distance, overallDirection: overallDirection
        };
    };
}
computeDistance._id = "computeDistance";

function computeMaxLength() {
    var maxPointLength = 0;
    return function (input) {
        var inputType = input.inputType;
        if (shared.INPUT_START === inputType) {
            maxPointLength = input.pointLength;
        }
        return { maxPointLength: maxPointLength };
    };
}
computeMaxLength._id = "computeMaxLength";

function computeScale(_a) {
    var startV = _a.startV, prevV = _a.prevV, activeV = _a.activeV;
    var deltaScale = shared.round2(vector.getVLength(activeV) / vector.getVLength(prevV));
    var scale = shared.round2(vector.getVLength(activeV) / vector.getVLength(startV));
    return { scale: scale, deltaScale: deltaScale };
}

function ComputeVAndDir() {
    var velocityX = 0;
    var velocityY = 0;
    var speedX = 0;
    var speedY = 0;
    var direction;
    var _lastValidInput;
    return function (input) {
        if (void 0 !== input) {
            var inputType = input.inputType;
            _lastValidInput = _lastValidInput || input.startInput;
            var deltaTime = input.timestamp - _lastValidInput.timestamp;
            if (shared.INPUT_MOVE === inputType && shared.COMPUTE_INTERVAL < deltaTime) {
                var deltaX = input.x - _lastValidInput.x;
                var deltaY = input.y - _lastValidInput.y;
                speedX = Math.round(deltaX / deltaTime * 100) / 100;
                speedY = Math.round(deltaY / deltaTime * 100) / 100;
                velocityX = Math.abs(speedX);
                velocityY = Math.abs(speedY);
                direction = vector.getDirection(deltaX, deltaY) || (direction);
                _lastValidInput = input;
            }
        }
        return { velocityX: velocityX, velocityY: velocityY, speedX: speedX, speedY: speedY, direction: direction };
    };
}
ComputeVAndDir._id = "ComputeVAndDir";

function computeVector(input) {
    return {
        x: input.points[1][shared.CLIENT_X] - input.points[0][shared.CLIENT_X],
        y: input.points[1][shared.CLIENT_Y] - input.points[0][shared.CLIENT_Y]
    };
}

function ComputeVectorForMutli() {
    return function (input) {
        var prevInput = input.prevInput, startMultiInput = input.startMultiInput;
        if (void 0 !== startMultiInput &&
            void 0 !== prevInput &&
            input.id !== startMultiInput.id &&
            1 < input.pointLength) {
            return {
                startV: computeVector(startMultiInput),
                prevV: computeVector(prevInput),
                activeV: computeVector(input)
            };
        }
    };
}
ComputeVectorForMutli._id = "ComputeVectorForMutli";

exports.ComputeDeltaXY = ComputeDeltaXY;
exports.ComputeDistance = computeDistance;
exports.ComputeMaxLength = computeMaxLength;
exports.ComputeVAndDir = ComputeVAndDir;
exports.ComputeVectorForMutli = ComputeVectorForMutli;
exports.computeAngle = computeAngle;
exports.computeScale = computeScale;
exports.computeVector = computeVector;
