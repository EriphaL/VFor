import { STATUS_POSSIBLE, STATUS_START, STATUS_MOVE, STATUS_END, STATUS_CANCELLED, STATUS_FAILED, STATUS_RECOGNIZED } from '@any-touch/shared';
import Base from '@any-touch/recognizer';
export declare type Recognizer = Base;
export declare type AnyTouchPlugin = any;
export declare type SupportEvent = MouseEvent | TouchEvent;
export interface PointClientXY {
    target: EventTarget | null;
    clientX: number;
    clientY: number;
}
export declare type InputType = 'start' | 'move' | 'end' | 'cancel';
export interface BaseInput {
    readonly id: number;
    readonly inputType: InputType;
    readonly changedPoints: PointClientXY[];
    readonly points: PointClientXY[];
    readonly target: EventTarget | null;
    readonly targets: (EventTarget | null)[];
    readonly nativeEvent: Event;
}
export interface PureInput extends BaseInput {
    readonly isStart: boolean;
    readonly isEnd: boolean;
    readonly pointLength: number;
    readonly timestamp: number;
    readonly target: EventTarget | null;
    readonly currentTarget: EventTarget | null;
    readonly center?: Point;
    readonly x: number;
    readonly y: number;
    readonly getOffset: (el: HTMLElement | SVGElement) => {
        x: number;
        y: number;
    };
}
export interface Input extends PureInput {
    readonly startInput: PureInput;
    readonly startMultiInput?: PureInput;
    readonly prevInput?: PureInput;
}
export interface StdClass {
    new (...args: any[]): any;
}
export interface ComputeConstructor {
    _id: string;
    new (...args: any[]): {
        compute(input: Input): Record<string, any> | void;
    };
}
export interface CommonEmitFunction {
    (type: string, ...payload: any[]): void;
}
export declare type directionString = 'up' | 'right' | 'down' | 'left' | 'none';
export declare type RecognizerStatus = 'possible' | 'recognized' | 'began' | 'changed' | 'ended' | 'failed' | 'cancelled';
export interface Point {
    x: number;
    y: number;
}
export declare type Vector = Point;
export declare type InputRecord = {
    input: Input;
    startInput: Input;
    prevInput?: Input;
    startMultiInput?: Input;
};
export interface Computed {
    maxPointLength?: number;
    velocityX: number;
    velocityY: number;
    speedX: number;
    speedY: number;
    scale: number;
    deltaScale: number;
    angle: number;
    deltaAngle: number;
    deltaX: number;
    deltaY: number;
    deltaXYAngle: number;
    displacementX: number;
    displacementY: number;
    distanceX: number;
    distanceY: number;
    distance: number;
    deltaTime: number;
    overallDirection?: directionString;
    direction?: directionString;
}
export interface AnyTouchEvent extends Input, Readonly<Computed> {
    readonly type: string;
}
export declare type SupportStatus = typeof STATUS_POSSIBLE | typeof STATUS_START | typeof STATUS_MOVE | typeof STATUS_END | typeof STATUS_CANCELLED | typeof STATUS_FAILED | typeof STATUS_RECOGNIZED;
