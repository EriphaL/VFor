import { __extends, __assign } from 'tslib';
import { INPUT_START, STATUS_RECOGNIZED, INPUT_END, DIRECTION_UP, INPUT_CANCEL, STATUS_FAILED } from '@any-touch/shared';
import { ComputeDistance } from '@any-touch/compute';
import Recognizer, { resetStatusForPressMoveLike } from '@any-touch/recognizer';

var DEFAULT_OPTIONS = {
    name: 'press',
    pointLength: 1,
    maxDistance: 9,
    minPressTime: 251,
};
var default_1 = (function (_super) {
    __extends(default_1, _super);
    function default_1(options) {
        return _super.call(this, __assign(__assign({}, DEFAULT_OPTIONS), options)) || this;
    }
    default_1.prototype.recognize = function (input, emit) {
        var _this = this;
        var inputType = input.inputType, startInput = input.startInput, pointLength = input.pointLength;
        if (INPUT_START === inputType && this.isValidPointLength(pointLength)) {
            resetStatusForPressMoveLike(this);
            this.cancel();
            this._timeoutId = setTimeout(function () {
                _this.status = STATUS_RECOGNIZED;
                emit(_this.options.name, input);
            }, this.options.minPressTime);
        }
        else if (INPUT_END === inputType && STATUS_RECOGNIZED === this.status) {
            emit("" + this.options.name + DIRECTION_UP, this.computed);
        }
        else {
            var deltaTime = input.timestamp - startInput.timestamp;
            if (!this.test(input) ||
                (this.options.minPressTime > deltaTime && [INPUT_END, INPUT_CANCEL].includes(inputType))) {
                this.cancel();
                this.status = STATUS_FAILED;
            }
        }
    };
    default_1.prototype.test = function (input) {
        this.computed = this.compute([ComputeDistance], input);
        var distance = this.computed.distance;
        return this.options.maxDistance > distance;
    };
    default_1.prototype.cancel = function () {
        clearTimeout(this._timeoutId);
    };
    return default_1;
}(Recognizer));

export default default_1;
