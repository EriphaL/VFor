'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var tslib = require('tslib');
var shared = require('@any-touch/shared');
var compute = require('@any-touch/compute');
var Recognizer = require('@any-touch/recognizer');
var Recognizer__default = _interopDefault(Recognizer);

var DEFAULT_OPTIONS = {
    name: 'press',
    pointLength: 1,
    maxDistance: 9,
    minPressTime: 251,
};
var default_1 = (function (_super) {
    tslib.__extends(default_1, _super);
    function default_1(options) {
        return _super.call(this, tslib.__assign(tslib.__assign({}, DEFAULT_OPTIONS), options)) || this;
    }
    default_1.prototype.recognize = function (input, emit) {
        var _this = this;
        var inputType = input.inputType, startInput = input.startInput, pointLength = input.pointLength;
        if (shared.INPUT_START === inputType && this.isValidPointLength(pointLength)) {
            Recognizer.resetStatusForPressMoveLike(this);
            this.cancel();
            this._timeoutId = setTimeout(function () {
                _this.status = shared.STATUS_RECOGNIZED;
                emit(_this.options.name, input);
            }, this.options.minPressTime);
        }
        else if (shared.INPUT_END === inputType && shared.STATUS_RECOGNIZED === this.status) {
            emit("" + this.options.name + shared.DIRECTION_UP, this.computed);
        }
        else {
            var deltaTime = input.timestamp - startInput.timestamp;
            if (!this.test(input) ||
                (this.options.minPressTime > deltaTime && [shared.INPUT_END, shared.INPUT_CANCEL].includes(inputType))) {
                this.cancel();
                this.status = shared.STATUS_FAILED;
            }
        }
    };
    default_1.prototype.test = function (input) {
        this.computed = this.compute([compute.ComputeDistance], input);
        var distance = this.computed.distance;
        return this.options.maxDistance > distance;
    };
    default_1.prototype.cancel = function () {
        clearTimeout(this._timeoutId);
    };
    return default_1;
}(Recognizer__default));

exports.default = default_1;
